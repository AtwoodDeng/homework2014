c( variants('f.fit',model=c("mr"),res="reca")),
cvSettings(1,10,1234))
bank_ori=read.table("bank.csv",header=TRUE,sep=";")
# replace the 'unknown' with NA
bankNA = unknownToNA( bank_ori , "unknown")
# remove the entry with too many NAs
bank<-bankNA[-manyNAs(bankNA,nORp = 0.1),]
# delete poutcome列
bank$poutcome <- NULL
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("mr"),res="reca")),
cvSettings(1,10,1234))
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
rbind(t,matrix(0:0,1,2))
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
else
c(f1)
}
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("mr"),res="reca")),
cvSettings(1,10,1234))
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
print(nrow(t))
if(nrow(t) < 2)
{
rbind(t,matrix(0:0,1,2))
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
else
c(f1)
}
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("mr"),res="reca")),
cvSettings(1,10,1234))
rm(f.fit)
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
rbind(t,matrix(1:2,1,2))
if(nrow(t) < 2)
{
rbind(t,matrix(0:0,1,2))
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
else
c(f1)
}
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("mr"),res="reca")),
cvSettings(1,10,1234))
print(matrix(1:2,1,2))
M = fit( y~., data = clean.bank, model="qda",task="class")
# make the prediction
P = predict(M,clean.bank)
p
P
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return 0
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
else
c(f1)
}
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("mr"),res="reca")),
cvSettings(1,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("qda"),res="reca")),
cvSettings(1,10,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("qda"),res="reca")),
cvSettings(1,9,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("qda"),res="reca")),
cvSettings(1,3,1234))
pred <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
,model=c("naive","lr","naivebayes","lda"
,"dt","svm","randomforest","mr")
,res="pred")),
cvSettings(3,10,1234))
summary(res)
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return 0
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
else
c(f1)
}
summary(res)
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return 0
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return 0
}
print("t is ")
print(t)
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return 0
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return c(0)
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return (0)
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
else
c(f1)
}
pred <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
,model=c("naive","lr","naivebayes","lda"
,"dt","svm","randomforest","mr")
,res="pred")),
cvSettings(3,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("naive"),res="reca")),
cvSettings(1,3,1234))
bank_ori=read.table("bank.csv",header=TRUE,sep=";")
# replace the 'unknown' with NA
bankNA = unknownToNA( bank_ori , "unknown")
bank<-bankNA[-manyNAs(bankNA,nORp = 0.0),]
# delete poutcome列
bank$poutcome <- NULL
clean.bank <- knnImputation(bank, k = 10)
View(clean.bank)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("naive"),res="reca")),
cvSettings(1,3,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("lr"),res="reca")),
cvSettings(1,3,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("naivebayes"),res="reca")),
cvSettings(1,3,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("lda"),res="reca")),
cvSettings(1,3,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("dt"),res="reca")),
cvSettings(1,3,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("svm"),res="reca")),
cvSettings(1,3,1234))
f.fit <- function(form,train,test,res,...) {
m <- fit(form,train,task="class",...)
p <- predict(m,test)
t <- table( p , test$y)
if(nrow(t) < 2)
{
return (0)
}
print("t is ")
print(t)
tp <- t[2,2]
fp <- t[2,1]
fn <- t[1,2]
if (tp==0)
return(0)
prediction = tp / ( tp+fp)
print("prediction is ")
print(prediction)
recall = tp / (tp+fn)
print("recall is ")
print(recall)
f1 = 2 * prediction * recall/ ( prediction + recall)
print("f1 is ")
print( f1)
if (res=="pred")
c(prediction)
else if(res == "reca")
c(recall)
else
c(f1)
}
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("svm"),res="reca")),
cvSettings(1,3,1234))
}
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("svm"),res="reca")),
cvSettings(1,3,1234))
pred <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
,model=c("lr","naivebayes","lda"
,"dt","svm","randomforest")
,res="pred")),
cvSettings(3,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("svm","dt"),res="reca")),
cvSettings(1,3,1234))
summary(res)
pred <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
,model=c("lr","naivebayes","lda","dt","svm","randomforest")
,res="pred")),
cvSettings(3,10,1234))
summary(res)
pred <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
,model=c("lr","naivebayes","lda","dt","svm","randomforest")
,res="pred")),
pred <- experimentalComparison(
summary(res)
summary(res)
f1 <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
summary(res)
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("lr", "naivebayes","svm","dt"),res="reca")),
cvSettings(1,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("lr", "naivebayes","lda","svm","dt"),res="pred")),
cvSettings(1,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("qda","mr"),res="reca")),
cvSettings(3,3,1234))
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("lr", "naivebayes","lda","svm","dt"),res="pred")),
cvSettings(3,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("lr", "naivebayes","lda","svm","dt"),res="reca")),
cvSettings(3,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("lr", "naivebayes","lda","svm","dt"),res="f1")),
cvSettings(3,10,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("randomforest"),res="pred")),
cvSettings(1,3,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("randomforest"),res="reca")),
cvSettings(1,3,1234))
summary(res)
res <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit',model=c("randomforest"),res="f1")),
cvSettings(1,3,1234))
summary(res)
M = fit( y~., data = clean.bank, model="svm",task="class")
# make the prediction
P = predict(M,clean.bank)
I=Importance(M,clean.bank,method="1D-SA")
print(round(I$imp,digits=2))
# different models
# get the model
M = fit( y~., data = clean.bank, model="svm",task="class")
# make the prediction
P = predict(M,clean.bank)
I=Importance(M,clean.bank,method="1D-SA")
bank_ori=read.table("bank-full.csv",header=TRUE,sep=";")
# replace the 'unknown' with NA
bankNA = unknownToNA( bank_ori , "unknown")
# remove the entry with too many NAs
bank<-bankNA[-manyNAs(bankNA,nORp = 0.1),]
# delete poutcome列
bank$poutcome <- NULL
# complete the bank with knn
clean.bank <- knnImputation(bank, k = 10)
M = fit( y~., data = clean.bank, model="svm",task="class")
# make the prediction
P = predict(M,clean.bank)
I=Importance(M,clean.bank,method="1D-SA")
print(round(I$imp,digits=2))
print(round(I$imp,digits=2))
print(round(I$imp,digits=2))
View(bank)
bank_ori=read.table("bank.csv",header=TRUE,sep=";")
# replace the 'unknown' with NA
bankNA = unknownToNA( bank_ori , "unknown")
# remove the entry with too many NAs
bank<-bankNA[-manyNAs(bankNA,nORp = 0.1),]
# complete the bank with knn
clean.bank <- knnImputation(bank, k = 10)
P = predict(M,clean.bank)
I=Importance(M,clean.bank,method="1D-SA")
print(round(I$imp,digits=2))
table( P , clean.bank$y)
## verification
print(round(I$imp))
bank_ori=read.table("bank.csv",header=TRUE,sep=";")
# replace the 'unknown' with NA
bankNA = unknownToNA( bank_ori , "unknown")
# remove the entry with too many NAs
bank<-bankNA[-manyNAs(bankNA,nORp = 0.1),]
clean.bank <- knnImputation(bank, k = 10)
M = fit( y~., data = clean.bank, model="svm",task="class")
# make the prediction
P = predict(M,clean.bank)
I=Importance(M,clean.bank,method="1D-SA")
print(round(I$imp,digits=2))
pred <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
,model=c("svm")
,res="pred")),
cvSettings(3,10,1234))
summary(pred)
pred <- experimentalComparison(
c(dataset(y ~ .,clean.bank,'y')),
c( variants('f.fit'
,model=c("svm")
,res="reca")),
cvSettings(1,10,1234))
summary(pred)
View(bank)
View(bank)
